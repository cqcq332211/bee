const express = require('express');
const path = require('path');

const app = express();
const port = 3000;

// Set the views directory
app.set('views', path.join(__dirname,'views'));

// Set EJS as the view engine
app.set('view engine', 'ejs');

// Serve static files from the public directory
app.use(express.static(path.join(__dirname)));

// Serve the index.ejs file
app.get('/', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: 'Default text' });
});

// Serve different text content based on the URL path
app.get('/0', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "const http = require(\"http\");\nconst fs = require(\"fs\");\nconst url = require(\"url\");\nconst path = require(\"path\");\n\nconst port = 3001;\n\nconst server = http.createServer((req, res) => {\nconst reqUrl = url.parse(req.url, true);\n\n  if (reqUrl.pathname === \"/\") {\n    fs.readFile(path.join(__dirname, \"todo.json\"), (err, data) => {\n      if (err) {\n        res.end(\"Internal Server Error\");\n        return;\n      }\n      res.end(data);\n    });\n  } else if (reqUrl.pathname === \"/getdata\") {\n    fs.readFile(path.join(__dirname, \"login.html\"), (err, data) => {\n      if (err) {\n        res.end(\"Internal Server Error\");\n        return;\n      }\n      res.end(data);\n    });\n  } else if (reqUrl.pathname === \"/style.css\") {\n    fs.readFile(path.join(__dirname, \"style.css\"), (err, data) => {\n      if (err) {\n        res.end(\"Internal Server Error\");\n        return;\n      }\n      res.end(data);\n    });\n  } else {\n    res.end(\"Not Found\");\n  }\n});\nserver.listen(port, () => {\n  console.log(Server running at ${port});\n});"});
});

app.get('/1', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "\n//import\n\nconst math = require(\"./math\");\nconst fs = require(\"fs\");\n\nlet arr = [1,2,3,4,5,6];\nlet obj = [\n    {\n        a: 2,\n        b: 3\n    }\n]\n\n\nlet data = math.sum(2, 3);\nlet arrSum = math.arrSum(arr);\nlet objSum = math.objSum(obj);\nlet even = math.even(arr);\nlet odd = math.odd(arr);\n\nconsole.log(odd);\n\n\n\n//export\n\nfunction sum(a, b) {\n  let sum = this is the sum ${a + b};\n  return sum;\n}\nfunction arrSum(arr) {\n  let sum = 0;\n  arr.forEach(num => {\n      sum += num;\n  });\n  return this is the arr sum ${sum};\n}\n\nfunction objSum(objArr) {\n  let sum = 0;\n  objArr.forEach(obj => {\n      for (let key in obj) {\n          if (typeof obj[key] === 'number') {\n              sum += obj[key];\n          }\n      }\n  });\n  return sum;\n}\n\nfunction odd(arr){\n  let o = 0;\n  arr.forEach((obj)=>{\n      if(obj % 2 != 0){\n          o++;\n      }\n  })\n  return o;\n}\n\nmodule.exports = {\n  sum,\n  arrSum,\n  objSum,\n  odd\n};\n\n\n\n\n\n\n//if need or remove\n\nfunction append(data) {\n    fs.readFile(\"./data.txt\", \"utf-8\", (err, fileData) => {\n        if (err) {\n            console.error(err);\n        } else {\n            let newData = data; \n\n            fs.writeFile(\"./data.txt\", newData, (err) => {\n                if (err) {\n                    console.error(err);\n                } else {\n                    console.log(\"Data appended successfully!\");\n                }\n            });\n        }\n    });\n}\n\nfunction append(data){\n    const ans = fs.readFileSync(\"/data.txt\", \"utf-8\");\n    const newData = ans + data;\n    fs.writeFileSync(\"/data.txt\", String(newData));\n}"});
});



app.get('/3', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "const express=require(\"express\");\nconst app=express();\nconst fs = require(\"fs\");\nconst multer=require(\"multer\");\nconst path = require(\"path\");\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static(__dirname+\"/public\"));\n\n\nconst storage=multer.diskStorage({\n    destination:(req,file,cb)=>{\n        let ext = path.extname(file.originalname);\n        if(ext == \".jpg\"){\n            cb(null,__dirname+\"/public/jpg\");\n        }\n        else{\n            cb(null,__dirname+\"/public/others\");\n        }\n    },\n    filename:(req,file,cb)=>{\n        var name= Date.now() + path.extname(file.originalname);\n        cb(null,name);\n    }\n})\n\nconst filter=(req,file,cb)=>{\n    // let ext = file.mimetype.split(\"/\")[1];\n    let ext = path.extname(file.originalname).toLowerCase();\n    if(ext==\".jpeg\"||ext==\".png\"||ext==\".jpg\"){\n        cb(null,true);\n    }else{\n        cb(new Error(\"not supported\"),false);\n    }\n}\n\nconst upload = multer({storage:storage,limits: { fileSize: 2 * 1024 * 1024 }, fileFilter: filter});\n\n\napp.get(\"/\",(req,res)=>{\n    res.sendFile(__dirname+\"/upload.html\");\n})\napp.post(\"/upload\",upload.single(\"pic\"),(req,res)=>{\n    console.log(req.file);\n    const {name, price} = req.body;\n    const filename = req.file.filename;\n\n    fs.readFile(__dirname + \"/product.json\", 'utf-8', (err,data)=>{\n        if(err){\n            console.error(\"error reading file\", err);\n            return res.send(\"internal server error\")\n        }\n        let products;\n        if(data.length==0){\n            products=[];\n        }\n        else{\n            products = JSON.parse(data);\n        }\n       \n        products.push({name,price,filename});\n        fs.writeFile(__dirname + \"/product.json\", JSON.stringify(products), (err)=>{\n            if(err){\n                console.error(\"error write the file\",err);\n                return res.send(\"internal server error\");\n            }\n            else{\n                res.send(\"file received successfully\");\n            }\n        })\n\n    })\n})\n\napp.get(\"/products\",(req,res)=>{\n    res.sendFile(__dirname + \"/products.html\");\n})\napp.get(\"/api/products\",(req,res)=>{\n    res.sendFile(__dirname + \"/product.json\");\n})\n\n\napp.listen(3000, (err)=>{\n    console.log(\"server started successfully\");\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//upload page\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n//     <link rel=\"stylesheet\" href=\"style.css\">\n// </head>\n\n// <body>\n//     <h1>upload</h1>\n//     <form method=\"post\" action=\"upload\" enctype=\"multipart/form-data\">\n//         <input type=\"text\" name=\"name\">\n//         <input typ=\"text\" name=\"price\">\n//         <input type=\"file\" name=\"pic\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>\n\n\n\n\n\n\n{/* all product page */}\n// <!DOCTYPE html>\n// <html lang=\"en\">\n//   <head>\n//     <meta charset=\"UTF-8\" />\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n//     <title>Product List</title>\n//   </head>\n//   <body>\n//     <table id=\"productTable\">\n//         <tr>\n//           <th>Name</th>\n//           <th>Price</th>\n//           <th>Image</th>\n//         </tr>\n//     </table>\n\n//     <script>\n//       async function fetchAndDisplayProducts() {\n//           const response = await fetch(\"/api/products\");\n//           const products = await response.json();\n//           const productTable = document.getElementById(\"productTable\");\n//           products.forEach((product) => {\n//             const row = document.createElement(\"tr\");\n//             row.innerHTML = `\n//                         <td>${product.name}</td>\n//                         <td>${product.price}</td>\n//                         <td><img src=\"${product.filename}\" alt=\"${product.name}\" style=\"max-width: 100px;\"></td>\n//                     `;\n//                 productTable.appendChild(row);\n//           });\n//       }\n//       fetchAndDisplayProducts();\n//     </script>\n//   </body>\n// </html>"});
});

app.get('/4', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "const express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst multer = require(\"multer\");\n\nfunction dbConnect () {\n    // mongodb+srv://dashomik:batmanshomik25@cluster0.2tpn2tm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\n    mongoose.connect(\"mongodb://localhost:27017/multer\")\n      .then(() => {\n        console.log(\"DB Connection successful\");\n      })\n      .catch((error) => {\n        console.log(\" DB Got error\");\n        console.error(error.message);\n      });\n    };\ndbConnect();\n\n\nconst productSchema = new mongoose.Schema({\n    name: String,\n    price: Number,\n    filename: String\n});\n\nconst Product = mongoose.model(\"Product\", productSchema);\n\nconst storage=multer.diskStorage({\n    destination:(req,file,cb)=>{\n        let ext = path.extname(file.originalname);\n        if(ext == \".jpg\"){\n            cb(null,__dirname+\"/public/jpg\");\n        }\n        else{\n            cb(null,__dirname+\"/public/others\");\n        }\n    },\n    filename:(req,file,cb)=>{\n        var name= Date.now() + path.extname(file.originalname);\n        cb(null,name);\n    }\n})\n\nconst filter=(req,file,cb)=>{\n    // let ext = file.mimetype.split(\"/\")[1];\n    let ext = path.extname(file.originalname).toLowerCase();\n    if(ext==\".jpeg\"||ext==\".png\"||ext==\".jpg\"){\n        cb(null,true);\n    }else{\n        cb(new Error(\"not supported\"),false);\n    }\n}\n\nconst upload = multer({storage:storage,limits: { fileSize: 2 * 1024 * 1024 }, fileFilter: filter});\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static(__dirname + \"/public\"));\n\napp.get(\"/\", (req, res) => {\n    res.sendFile(__dirname + \"/upload.html\");\n});\n\napp.post(\"/upload\", upload.single(\"pic\"), async (req, res) => {\n    console.log(req.file);\n    const { name, price } = req.body;\n    const filename = req.file.filename;\n\n    try {\n        const product = Product.create({ name, price, filename });\n        res.send(\"file received successfully\");\n    } catch (err) {\n        console.error(\"Error saving product:\", err);\n        res.status(500).send(\"Internal server error\");\n    }\n});\n\napp.get(\"/products\", (req, res) => {\n    res.sendFile(__dirname + \"/products.html\");\n});\n\napp.get(\"/api/products\", async (req, res) => {\n    try {\n        const products = await Product.find();\n        res.json(products);\n    } catch (err) {\n        console.error(\"Error fetching products:\", err);\n        res.status(500).send(\"Internal server error\");\n    }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(Server started on port ${PORT});\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// all product page\n// <!DOCTYPE html>\n// <html lang=\"en\">\n//   <head>\n//     <meta charset=\"UTF-8\" />\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n//     <title>Product List</title>\n//   </head>\n//   <body>\n//     <table id=\"productTable\">\n//         <tr>\n//           <th>Name</th>\n//           <th>Price</th>\n//           <th>Image</th>\n//         </tr>\n//     </table>\n\n//     <script>\n//       async function fetchAndDisplayProducts() {\n//           const response = await fetch(\"/api/products\");\n//           const products = await response.json();\n//           const productTable = document.getElementById(\"productTable\");\n//           products.forEach((product) => {\n//             const row = document.createElement(\"tr\");\n//             row.innerHTML = `\n//                         <td>${product.name}</td>\n//                         <td>${product.price}</td>\n//                         <td><img src=\"${product.filename}\" alt=\"${product.name}\" style=\"max-width: 100px;\"></td>\n//                     `;\n//                 productTable.appendChild(row);\n//           });\n//       }\n//       fetchAndDisplayProducts();\n//     </script>\n//   </body>\n// </html>\n\n\n\n\n\n// upload\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n//     <link rel=\"stylesheet\" href=\"style.css\">\n// </head>\n\n// <body>\n//     <form method=\"post\" action=\"upload\" enctype=\"multipart/form-data\">\n//         <input type=\"text\" name=\"name\">\n//         <input typ=\"text\" name=\"price\">\n//         <input type=\"file\" name=\"pic\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>"});
});

app.get('/5', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "const express = require(\"express\");\nconst app = express();\nconst PORT = 3000;\nconst fs = require(\"fs\");\nconst session = require(\"express-session\");\nconst cookie = require(\"cookie-parser\");\n\napp.use(express.json());\napp.use(express.urlencoded({extended:true}));\napp.use(cookie());\napp.use(session({\n    saveUninitialized: true,\n    secret: \"best25\"\n}))\n\nfunction check (req,res,next){\n    if(req.session.user){\n        next();\n    }\n    else{\n        res.redirect(\"/login\");\n    }\n}\n\napp.get('/', check, (req,res)=>{\n    res.sendFile(__dirname + \"/home.html\");\n})\n\napp.get('/login', (req,res)=>{\n    res.sendFile(__dirname + \"/login.html\");\n})\napp.get('/signup', (req,res)=>{\n    res.sendFile(__dirname + \"/signup.html\");\n})\n\napp.post('/login',(req,res)=>{\n    const {userName, password} = req.body;\n    fs.readFile(\"./users.json\", \"utf-8\", (err,data)=>{\n        if(err){\n            console.log(\"error read the file\");\n            console.error(\"read error is : \",err);\n        }\n        else{\n            const users = JSON.parse(data);\n            let userHere = false;\n            users.forEach((user)=>{\n                if(user.userName == userName && user.password == password){\n                    userHere = true;\n                }\n            })\n            if(userHere){\n                req.session.user = userName;\n                res.redirect(\"/\");\n                return;\n            }\n            else{\n                res.send(\"user not found\");\n            }\n        }\n    })\n})\n\napp.post('/signup',(req,res)=>{\n    const {userName, password} = req.body;\n    fs.readFile(\"./users.json\", \"utf-8\", (err,data)=>{\n        if(err){\n            console.log(\"error read the file\");\n            console.error(\"read error is : \",err);\n            return;\n        }\n        else{\n            const users = JSON.parse(data);\n            let userHere = false;\n            users.forEach((user)=>{\n                if(user.userName == userName){\n                    userHere = true;\n                }\n            })\n            if(userHere){\n                res.send(\"user already here\");\n                return;\n            }\n            else{\n                users.push({userName, password});\n                fs.writeFile(\"./users.json\",JSON.stringify(users), (err)=>{\n                    if(err){\n                        console.log(\"error write the file\");\n                        console.error(\"write error is : \",err);\n                        return;\n                    }\n                    else{\n                        res.send(\"user added\");\n                        return;\n                    }\n                })\n            }\n        }\n    })\n})\n\napp.get(\"/logout\", (req,res)=>{\n    req.session.destroy();\n    res.redirect(\"/login\");\n})\n\n\napp.listen(PORT,(err)=>{\n    if(err){\n        console.log(\"error in listen\");\n        console.error(\"listen error: \", err);\n    }\n    console.log(\"sever is running\");\n})\n\n\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <H1>this is Login page </H1>\n//     <form action=\"/login\" method = \"post\">\n//         <input type=\"text\" name=\"userName\">\n//         <input type=\"text\" name=\"password\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>"});
});

app.get('/6', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "//make public and views folder\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst path = require(\"path\");\nconst session = require(\"express-session\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst ejs = require(\"ejs\");\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(__dirname + \"/public\"));\napp.set(\"view engine\", \"ejs\");\n\nfunction dbConnect() {\n  mongoose\n    .connect(\"mongodb://localhost:27017/loginWithMUlter\")\n    .then(() => {\n      console.log(\"DB Connection successful\");\n    })\n    .catch((error) => {\n      console.log(\" DB Got error\");\n      console.error(error.message);\n    });\n}\ndbConnect();\n\nconst userSchema = new mongoose.Schema({\n  userName: {\n    type: String,\n  },\n  password: {\n    type: String,\n  },\n  fileName: {\n    type: String,\n  },\n});\n\nconst User = mongoose.model(\"User\", userSchema);\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(\n  session({\n    saveUninitialized: true,\n    secret: \"abc25\",\n  })\n);\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, __dirname + \"/public\");\n  },\n  filename: (req, file, cb) => {\n    var name = Date.now() + \".jpg\";\n    cb(null, name);\n  },\n});\n\nconst upload = multer({ storage: storage });\n\nfunction check(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect(\"/login\");\n  }\n}\n\napp.get(\"/\", check, async (req, res) => {\n  try {\n    const user = await User.findById(req.session.user);\n    res.render(\"home\", { user });\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"An error occurred\");\n  }\n});\n\napp.get(\"/login\", (req, res) => {\n  res.render(\"login\");\n});\n\napp.get(\"/signup\", (req, res) => {\n  res.render(\"signup\");\n});\n\napp.post(\"/login\", async (req, res) => {\n  const { userName, password } = req.body;\n  try {\n    const user = await User.findOne({ userName, password });\n    if (user) {\n      req.session.user = user._id;\n      res.redirect(\"/\");\n    } else {\n      res.send(\"User not found\");\n    }\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"An error occurred\");\n  }\n});\n\napp.post(\"/signup\", upload.single(\"pic\"), async (req, res) => {\n  const { userName, password } = req.body;\n  const fileName = req.file.filename;\n  try {\n    const existingUser = await User.findOne({ userName });\n    if (existingUser) {\n      res.send(\"User already exists\");\n    } else {\n      const newUser = new User.create({ userName, password, fileName });\n      res.send(\"User added\");\n    }\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"An error occurred\");\n  }\n});\n\napp.get(\"/logout\", (req, res) => {\n  req.session.destroy();\n  res.redirect(\"/login\");\n});\n\napp.listen(PORT, (err) => {\n  if (err) {\n    console.log(\"Error in listen\");\n    console.error(\"Listen error: \", err);\n  }\n  console.log(\"Server is running\");\n});\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//home.ejs  view\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Home Page</title>\n// </head>\n// <body>\n//     <h1>Welcome <%= user.userName %></h1>\n//     <img src=\"/<%= user.fileName %>\" alt=\"\" style=\"max-width: 100px;\">\n//     <a href=\"/logout\">Logout</a>\n// </body>\n// </html>\n\n//login.ejs  view\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <H1>this is Login page </H1>\n//     <form action=\"/login\" method = \"post\">\n//         <input type=\"text\" name=\"userName\">\n//         <input type=\"text\" name=\"password\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>\n\n//signup.ejs  view\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <H1>this is signup page </H1>\n//     <form action=\"/signup\" method = \"post\" enctype=\"multipart/form-data\">\n//         <input type=\"text\" name=\"userName\">\n//         <input type=\"text\" name=\"password\">\n//         <input type=\"file\" name=\"pic\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>"});
});

app.get('/7', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text: "const express = require(\"express\");\nconst app = express();\nconst mongoose = require(\"mongoose\");\nconst multer = require(\"multer\");\n\napp.set(\"view engine\",\"ejs\");\n\nfunction dbConnect () {\n    // mongodb+srv://dashomik:batmanshomik25@cluster0.2tpn2tm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\n    mongoose.connect(\"mongodb://localhost:27017/multer\") \n      .then(() => {\n        console.log(\"DB Connection successful\");\n      })\n      .catch((error) => {\n        console.log(\" DB Got error\");\n        console.error(error.message);\n      });\n    };\ndbConnect();\n\n\nconst productSchema = new mongoose.Schema({\n    name: String,\n    price: Number,\n    filename: String,\n    description: String\n});\n\nconst Product = mongoose.model(\"Product\", productSchema);\n\nconst storage = multer.diskStorage({\n    destination: (req, file, cb) => {\n        cb(null, __dirname + \"/public\");\n    },\n    filename: (req, file, cb) => {\n        var name = Date.now() + \".jpg\";\n        cb(null, name);\n    }\n});\n\nconst upload = multer({ storage: storage });\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.static(__dirname + \"/public\"));\n\napp.get(\"/\", (req, res) => {\n    res.sendFile(__dirname + \"/upload.html\");\n});\n\napp.post(\"/upload\", upload.single(\"pic\"), async (req, res) => {\n    console.log(req.file);\n    const { name, price ,description } = req.body;\n    const filename = req.file.filename;\n\n    try {\n        const product = Product.create({ name, price, filename, description });\n        res.send(\"file received successfully\");\n    } catch (err) {\n        console.error(\"Error saving product:\", err);\n        res.status(500).send(\"Internal server error\");\n    }\n});\n\napp.get(\"/products\", (req, res) => {\n    res.sendFile(__dirname + \"/products.html\");\n});\n\napp.get(\"/api/products\", async (req, res) => {\n    try {\n        const products = await Product.find();\n        res.send(products);\n    } catch (err) {\n        console.error(\"Error fetching products:\", err);\n        res.status(500).send(\"Internal server error\");\n    }\n});\n\napp.get(\"/crud/delete/:id\", async(req, res) => {\n    const {id} = req.params;\n    try{\n        const products = await Product.findByIdAndDelete(id);\n        if(products){\n            res.redirect('/products');\n        }\n        else{\n            res.send(\"product not fount\");\n        }\n    }\n    catch(error){\n        console.error(\"error delete the product:\", error);\n        res.send(\"internal server error\");\n    }\n});\n\napp.get(\"/crud/view/:id\", async(req, res) => {\n    const {id} = req.params;\n    try{\n      const product = await Product.findById(id);\n      res.render(\"view\", {product: product});\n    }\n    catch(err){\n      console.error('Error view page:', err);\n      res.status(500).send('Internal Server Error');\n    }\n});\n\napp.get(\"/crud/update/:id\", async(req, res) => {\n    const {id} = req.params;\n    try{\n      const product = await Product.findById(id);\n      res.render(\"update\", {product: product});\n    }\n    catch(err){\n      console.error('Error update page:', err);\n      res.status(500).send('Internal Server Error');\n    }\n});\n\napp.post(\"/crud/updateProduct\", async(req, res) => {\n    const {productId, productName, productPrice} = req.body;\n    try{\n        const products = await Product.findByIdAndUpdate(productId, { name: productName, price: productPrice });\n        if(products){\n            res.redirect('/products');\n        }\n        else{\n            res.send(\"product not found\");\n        }\n    }\n    catch(error){\n        console.error(\"error updating the product:\", error);\n        res.send(\"internal server error\");\n    }\n});\n\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n    console.log(Server started on port ${PORT});\n});\n\n\n\n\n\n\n\n\n\n\n//public and views\n\n//products.html\n// <!DOCTYPE html>\n// <html lang=\"en\">\n//   <head>\n//     <meta charset=\"UTF-8\" />\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n//     <title>Product List</title>\n//   </head>\n//   <body>\n//     <table id=\"productTable\">\n//       <tr>\n//         <th>Name</th>\n//         <th>Price</th>\n//         <th>Image</th>\n//       </tr>\n//     </table>\n//     <script>\n//       async function fetchAndDisplayProducts() {\n//         const response = await fetch(\"/api/products\");\n//         const products = await response.json();\n//         const productTable = document.getElementById(\"productTable\");\n//         products.forEach((product) => {\n//           const row = document.createElement(\"tr\");\n//           row.innerHTML = `\n//                         <td>${product.name}</td>\n//                         <td>${product.price}</td>\n//                         <td><img src=\"${product.filename}\" alt=\"${product.name}\" style=\"width: 100px;\"></td>\n//                         <td>\n//                             <a href = \"/crud/delete/${product._id}\" \"style=\"margin-right: 10px;\"><button>Delete</button><a>\n//                             <a href = \"/crud/update/${product._id}\" \"style=\"margin-right: 10px;\"><button>Update</button><a>\n//                             <a href = \"/crud/view/${product._id}\" ><button>View</button><a>\n//                         </td>\n//                     `;\n//           productTable.appendChild(row);\n//         });\n//       }\n//       fetchAndDisplayProducts();\n//     </script>\n//   </body>\n// </html>\n\n\n//uploard.html\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n//     <link rel=\"stylesheet\" href=\"style.css\">\n// </head>\n\n// <body>\n//     <h1>upload</h1>\n//     <form method=\"post\" action=\"upload\" enctype=\"multipart/form-data\">\n//         <input type=\"text\" name=\"name\" required>\n//         <input typ=\"text\" name=\"price\" required>\n//         <textarea name=\"description\" required></textarea>\n//         <input type=\"file\" name=\"pic\" required>\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>\n\n\n//update.ejs\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Update Product Page</title>\n// </head>\n// <body>\n//     <h1>Update Product Page</h1>\n//     <img src=\"/<%= product.filename %>\" alt=\"\" style=\"width: 100px;\">\n//     <form action=\"/crud/updateProduct\" method=\"post\"> <!-- Corrected form action -->\n//         <input type=\"text\" value=\"<%= product.id %>\" name=\"productId\" hidden>\n//         <input type=\"text\" value=\"<%= product.name %>\" name=\"productName\">\n//         <input type=\"text\" value=\"<%= product.price %>\" name=\"productPrice\">\n//         <input type=\"submit\" class=\"button\">\n//     </form>\n//     <a href=\"/products\"><button>Back</button></a>\n// </body>\n// </html>\n\n\n\n//view.ejs\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <h1>Product Details Page</h1>\n//     <img src=\"/<%= product.filename %>\" style=\"width: 100px;\" alt=\"Product Image\">\n//     <h3><%= product.name %></h3>\n//     <p>Price: <%= product.price %></p>\n//     <p>description: <%= product.description%></p>\n\n//     <div class=\"buttons\">\n//         <a href=\"/products\"><button class=\"cancel-btn\">Back</button></a>\n//     </div>\n// </body>\n// </html>"});
});

app.get('/8', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\n\nfunction dbConnect() {\n  // mongodb+srv://dashomik:batmanshomik25@cluster0.2tpn2tm.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\n  mongoose\n    .connect(\"mongodb://localhost:27017/database\")\n    .then(() => {\n      console.log(\"DB Connection successful\");\n    })\n    .catch((error) => {\n      console.log(\" DB Got error\");\n      console.error(error.message);\n    });\n}\ndbConnect();\n\nconst playerSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  game: String,\n});\n\nconst Player = mongoose.model(\"Player\", playerSchema);\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.set(\"view engine\", \"ejs\");\n\napp.get(\"/\", async (req, res) => {\n  try {\n    const players = await Player.find({});\n    res.render(\"index\", { players });\n  } catch (err) {\n    res.send(err);\n  }\n});\n\napp.post(\"/search\", async (req, res) => {\n  const { name, age, game } = req.body;\n  let filter = {};\n\n  if (name) {\n    filter.name = name;\n  }\n  if (age) {\n    filter.age = age;\n  }\n  if (game) {\n    filter.game = game;\n  }\n\n  try {\n    const players = await Player.find(filter);\n    res.render(\"index\", { players });\n  } catch (err) {\n    res.send(err);\n  }\n});\n\nconst PORT = 3000;\napp.listen(PORT, () => {\n  console.log(Server is running on port ${PORT});\n});\n\n//indexedDB.ejs\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <h1>Sports Players</h1>\n\n//     <form action=\"/search\" method=\"POST\">\n//         <input type=\"text\" name=\"name\" placeholder=\"Name\">\n//         <input type=\"number\" name=\"age\" placeholder=\"Age\">\n//         <input type=\"text\" name=\"game\" placeholder=\"Game\">\n//         <button type=\"submit\">Search</button>\n//     </form>\n\n//     <table border=\"1\">\n//         <thead>\n//             <tr>\n//                 <th>Name</th>\n//                 <th>Age</th>\n//                 <th>Game</th>\n//             </tr>\n//         </thead>\n//         <tbody>\n//             <% players.forEach(player => { %>\n//                 <tr>\n//                     <td><%= player.name %></td>\n//                     <td><%= player.age %></td>\n//                     <td><%= player.game %></td>\n//                 </tr>\n//             <% }) %>\n//         </tbody>\n//     </table>\n// </body>\n// </html>\n\n// const sampleData = [\n//     { name: 'aryan', age: 10, game: 'football' },\n//     { name: 'anshul', age: 15, game: 'football' },\n//     { name: 'shivam', age: 12, game: 'cricket' },\n//     { name: 'shivank', age: 11, game: 'cricket' },\n//     { name: 'shomik', age: 20, game: 'football' }\n// ];"});
});

   app.get('/2', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const express = require('express');\nconst app = express();\nconst port = 3001;\nconst fs = require('fs');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.get(\"/\", (req, res) => {\n    res.sendFile(__dirname + \"/todo.json\");\n});\n\napp.get(\"/getdata\", (req, res) => {\n    res.sendFile(__dirname + \"/login.html\");\n});\n\napp.post('/addtask', (req, res) => {\n    const { name, id } = req.body;\n\n    if (!name || !id) {\n        res.send(\"Please provide a title, id, and status.\");\n        return;\n    }\n\n    fs.readFile('todo.json', 'utf8', (err, data) => {\n        if (err) {\n            res.send(\"Error reading file.\");\n            return;\n        }\n\n        let tasks = JSON.parse(data);\n\n        tasks.push({ name, id });\n\n        fs.writeFile('todo.json', JSON.stringify(tasks, null, 2), (err) => {\n            if (err) {\n                res.send('Error writing file.');\n                return;\n            }\n            res.send('Task added successfully.');\n        });\n    });\n});\n\napp.get(\"/delete\", (req, res) => {\n    const name = req.query.name;\n    fs.readFile(__dirname + \"/todo.json\", \"utf-8\", (err, data) => {\n        if (err) {\n            res.send(\"Internal Server Error\");\n            return;\n        }\n        let allData = JSON.parse(data);\n        let newAllData = [];\n        newAllData = allData.filter((obj) => obj.name != name);\n        if (allData.length != newAllData.length) {\n            fs.writeFile(__dirname + \"/todo.json\", JSON.stringify(newAllData, null, 2), err => {\n                if (err) {\n                    res.send(\"Internal Server Error\");\n                    return;\n                }\n                res.send(\"Name deleted successfully.\");\n            });\n        } else {\n            res.send(\"Name not found.\");\n        }\n    });\n});\n\napp.put('/updateTask', (req, res) => {\n    const { id, name } = req.body;\n    fs.readFile('todo.json', 'utf8', (err, data) => {\n        if (err) {\n            res.send(\"Error reading file.\");\n            return;\n        }\n        let tasks = JSON.parse(data);\n        let updated = false;\n        tasks.forEach(task => {\n            if (task.id === id) {\n                task.name = name;\n                updated = true;\n            }\n        });\n        if (updated) {\n            fs.writeFile('todo.json', JSON.stringify(tasks, null, 2), (err) => {\n                if (err) {\n                    res.send('Error writing file.');\n                    return;\n                }\n                res.send('Task updated successfully.');\n            });\n        } else {\n            res.send(\"Task with provided id not found.\");\n        }\n    });\n});\n\napp.listen(port, (err) => {\n    if (err) {\n        console.error('Unable to start server:', err);\n    } else {\n        console.log('Server started on port', port);\n    }\n});\n\n\n\n\n\n\n//invalid count make errors.log error.json file \n\nconst express = require(\"express\");\nconst app = express();\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nlet invalidRequestCount = 0;\n\nconst logInvalidRequest = (req, res, next) => {\n    invalidRequestCount++;\n    const logEntry = {\n        url: req.url,\n        timestamp: new Date().toISOString()\n    };\n    \n    fs.readFile(path.join(__dirname, \"error.json\"), \"utf-8\", (err, data) => {\n        let errors = [];\n        if (!err && data) {\n            try {\n                errors = JSON.parse(data);\n            } catch (jsonErr) {\n                console.error(\"Error parsing JSON\", jsonErr);\n            }\n        }\n        errors.push(logEntry);\n        fs.writeFile(path.join(__dirname, \"error.json\"), JSON.stringify(errors, null, 2), (writeErr) => {\n            if (writeErr) {\n                console.error(\"Error writing to error.json\", writeErr);\n            }\n        });\n    });\n\n    const logMessage = URL: ${req.url}, Timestamp: ${logEntry.timestamp}\\n;\n    fs.appendFile(path.join(__dirname, \"errors.log\"), logMessage, (err) => {\n        if (err) {\n            console.error(\"Error writing to errors.log\", err);\n        }\n    });\n\n    res.send(invalid with count: ${invalidRequestCount});\n};\n\napp.get(\"/about\", logInvalidRequest);\napp.get(\"/home\", logInvalidRequest);\napp.get(\"*\", logInvalidRequest);\n\napp.get(\"/showrequest\", (req, res) => {\n    fs.readFile(path.join(__dirname, \"error.json\"), \"utf-8\", (err, data) => {\n        if (err) {\n            return res.status(500).send(\"Internal Server Error\");\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log(\"Server started on port 3000\");\n});"});
});


    app.get('/4.1', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const express = require('express');\nconst app = express();\nconst port = 3001;\nconst fs = require('fs');\n\napp.use(express.urlencoded({ extended: true }));\napp.use(express.json());\n\napp.get(\"/\", (req, res) => {\n    res.sendFile(__dirname + \"/todo.json\");\n});\n\napp.get(\"/getdata\", (req, res) => {\n    res.sendFile(__dirname + \"/login.html\");\n});\n\napp.post('/addtask', (req, res) => {\n    const { name, id } = req.body;\n\n    if (!name || !id) {\n        res.send(\"Please provide a title, id, and status.\");\n        return;\n    }\n\n    fs.readFile('todo.json', 'utf8', (err, data) => {\n        if (err) {\n            res.send(\"Error reading file.\");\n            return;\n        }\n\n        let tasks = JSON.parse(data);\n\n        tasks.push({ name, id });\n\n        fs.writeFile('todo.json', JSON.stringify(tasks, null, 2), (err) => {\n            if (err) {\n                res.send('Error writing file.');\n                return;\n            }\n            res.send('Task added successfully.');\n        });\n    });\n});\n\napp.get(\"/delete\", (req, res) => {\n    const name = req.query.name;\n    fs.readFile(__dirname + \"/todo.json\", \"utf-8\", (err, data) => {\n        if (err) {\n            res.send(\"Internal Server Error\");\n            return;\n        }\n        let allData = JSON.parse(data);\n        let newAllData = [];\n        newAllData = allData.filter((obj) => obj.name != name);\n        if (allData.length != newAllData.length) {\n            fs.writeFile(__dirname + \"/todo.json\", JSON.stringify(newAllData, null, 2), err => {\n                if (err) {\n                    res.send(\"Internal Server Error\");\n                    return;\n                }\n                res.send(\"Name deleted successfully.\");\n            });\n        } else {\n            res.send(\"Name not found.\");\n        }\n    });\n});\n\napp.put('/updateTask', (req, res) => {\n    const { id, name } = req.body;\n    fs.readFile('todo.json', 'utf8', (err, data) => {\n        if (err) {\n            res.send(\"Error reading file.\");\n            return;\n        }\n        let tasks = JSON.parse(data);\n        let updated = false;\n        tasks.forEach(task => {\n            if (task.id === id) {\n                task.name = name;\n                updated = true;\n            }\n        });\n        if (updated) {\n            fs.writeFile('todo.json', JSON.stringify(tasks, null, 2), (err) => {\n                if (err) {\n                    res.send('Error writing file.');\n                    return;\n                }\n                res.send('Task updated successfully.');\n            });\n        } else {\n            res.send(\"Task with provided id not found.\");\n        }\n    });\n});\n\napp.listen(port, (err) => {\n    if (err) {\n        console.error('Unable to start server:', err);\n    } else {\n        console.log('Server started on port', port);\n    }\n});\n\n\n\n\n\n\n//invalid count make errors.log error.json file \n\nconst express = require(\"express\");\nconst app = express();\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nlet invalidRequestCount = 0;\n\nconst logInvalidRequest = (req, res, next) => {\n    invalidRequestCount++;\n    const logEntry = {\n        url: req.url,\n        timestamp: new Date().toISOString()\n    };\n    \n    fs.readFile(path.join(__dirname, \"error.json\"), \"utf-8\", (err, data) => {\n        let errors = [];\n        if (!err && data) {\n            try {\n                errors = JSON.parse(data);\n            } catch (jsonErr) {\n                console.error(\"Error parsing JSON\", jsonErr);\n            }\n        }\n        errors.push(logEntry);\n        fs.writeFile(path.join(__dirname, \"error.json\"), JSON.stringify(errors, null, 2), (writeErr) => {\n            if (writeErr) {\n                console.error(\"Error writing to error.json\", writeErr);\n            }\n        });\n    });\n\n    const logMessage = URL: ${req.url}, Timestamp: ${logEntry.timestamp}\\n;\n    fs.appendFile(path.join(__dirname, \"errors.log\"), logMessage, (err) => {\n        if (err) {\n            console.error(\"Error writing to errors.log\", err);\n        }\n    });\n\n    res.send(invalid with count: ${invalidRequestCount});\n};\n\napp.get(\"/about\", logInvalidRequest);\napp.get(\"/home\", logInvalidRequest);\napp.get(\"*\", logInvalidRequest);\n\napp.get(\"/showrequest\", (req, res) => {\n    fs.readFile(path.join(__dirname, \"error.json\"), \"utf-8\", (err, data) => {\n        if (err) {\n            return res.status(500).send(\"Internal Server Error\");\n        }\n        res.send(data);\n    });\n});\n\napp.listen(3000, () => {\n    console.log(\"Server started on port 3000\");\n});"});
});

     app.get('/6.1', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const express = require(\"express\");\nconst path = require(\"path\");\nconst session = require(\"express-session\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst ejs = require(\"ejs\");\nconst { MongoClient, ObjectId } = require(\"mongodb\");\n\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.static(__dirname + \"/public\"));\napp.set(\"view engine\", \"ejs\");\n\nconst dbUrl = \"mongodb://localhost:27017/loginWithMUlter\";  //mongodb://localhost:27017/loginWithMUlter\nlet db, usersCollection;\n\nasync function dbConnect() {\n  try {\n    const client = new MongoClient(dbUrl);\n    await client.connect();\n    db = client.db(\"loginWithMUlter\");\n    usersCollection = db.collection(\"users\");\n    console.log(\"DB Connection successful\");\n  } catch (error) {\n    console.log(\"DB Got error\");\n    console.error(error.message);\n  }\n}\ndbConnect();\n\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(\n  session({\n    resave: true,\n    saveUninitialized: true,\n    secret: \"abc25\",\n  })\n);\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, __dirname + \"/public\");\n  },\n  filename: (req, file, cb) => {\n    var name = Date.now() + \".jpg\";\n    cb(null, name);\n  },\n});\n\nconst upload = multer({ storage: storage });\n\nfunction check(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect(\"/login\");\n  }\n}\n\napp.get(\"/\", check, async (req, res) => {\n  try {\n    const user = await usersCollection.findOne({ _id: new ObjectId(req.session.user) });\n    res.render(\"home\", { user });\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"error occurred\");\n  }\n});\n\napp.get(\"/login\", (req, res) => {\n  res.render(\"login\");\n});\n\napp.get(\"/signup\", (req, res) => {\n  res.render(\"signup\");\n});\n\napp.post(\"/login\", async (req, res) => {\n  const { userName, password } = req.body;\n  try {\n    const user = await usersCollection.findOne({ userName, password });\n    if (user) {\n      req.session.user = user._id;\n      res.redirect(\"/\");\n    } else {\n      res.send(\"User not found\");\n    }\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"error occurred\");\n  }\n});\n\napp.post(\"/signup\", upload.single(\"pic\"), async (req, res) => {\n  const { userName, password } = req.body;\n  const fileName = req.file.filename;\n  try {\n    const existingUser = await usersCollection.findOne({ userName });\n    if (existingUser) {\n      res.send(\"User already exists\");\n    } else {\n      const newUser = { userName, password, fileName };\n      await usersCollection.insertOne(newUser);\n      res.send(\"User added\");\n    }\n  } catch (err) {\n    console.error(\"Error:\", err);\n    res.send(\"error occurred\");\n  }\n});\n\napp.get(\"/logout\", (req, res) => {\n  req.session.destroy();\n  res.redirect(\"/login\");\n});\n\napp.listen(PORT, (err) => {\n  if (err) {\n    console.log(\"Error in listen\");\n    console.error(\"Listen error: \", err);\n  }\n  console.log(\"Server is running\");\n});\n\n\n\n//all in ejs home login and signup\n\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Home Page</title>\n// </head>\n// <body>\n//     <h1>Welcome <%= user.userName %></h1>\n//     <img src=\"/<%= user.fileName %>\" alt=\"\" style=\"max-width: 100px;\">\n//     <a href=\"/logout\">Logout</a>\n// </body>\n// </html>\n\n\n\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <H1>this is Login page </H1>\n//     <form action=\"/login\" method = \"post\">\n//         <input type=\"text\" name=\"userName\">\n//         <input type=\"text\" name=\"password\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>\n\n\n// <!DOCTYPE html>\n// <html lang=\"en\">\n// <head>\n//     <meta charset=\"UTF-8\">\n//     <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n//     <title>Document</title>\n// </head>\n// <body>\n//     <H1>this is signup page </H1>\n//     <form action=\"/signup\" method = \"post\" enctype=\"multipart/form-data\">\n//         <input type=\"text\" name=\"userName\">\n//         <input type=\"text\" name=\"password\">\n//         <input type=\"file\" name=\"pic\">\n//         <input type=\"submit\">\n//     </form>\n// </body>\n// </html>"});
});


app.get('/login', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const path = require('path');\nconst fs = require('fs');\n\nconst login = (req, res) => {\n    try {\n        if(req.session.email) {\n            return res.redirect('/dashboard.html');\n        }\n        \n        const { email, password } = req.body;\n        if(!email || !password) {\n            return res.redirect('/login.html');\n        }\n\n        // check if user exists\n        const data = fs.readFileSync(path.join(__dirname, '../data.json'), 'utf-8');\n        const users = JSON.parse(data);\n        \n        if(!users.find(user => user.email == email && user.password == password)) {\n            return res.send(\"Email or password is wrong\");\n        }\n        \n        req.session.email = email;\n        res.redirect('/dashboard.html');\n    } catch (error) {\n        console.log(\"Error occured at login controller\", error);\n        res.status(500).json({\n            success: false,\n            message: \"Internal server error\",\n        })\n    }\n}\n\n\nconst signUp = (req, res) => {\n    try {\n        const { email,  password, confirmPassword } = req.body;\n\n        if(!email || !password || !confirmPassword) {\n            return res.status(400).send(\"Fill the required details\");\n        }\n\n        if(password !== confirmPassword) {\n            return res.status(400).send(\"Passwords are diffrent\");\n        }\n\n        const data = fs.readFileSync(path.join(__dirname, '../data.json'), 'utf-8');\n        const users = JSON.parse(data);\n\n        if(users.find(user => user.email == email)) {\n           return res.status(409).send(\"User already exist\");\n        }\n\n        users.push({email, password});\n\n        fs.writeFileSync(path.join(__dirname, '../data.json'), JSON.stringify(users, null, 4));\n\n        res.redirect('/login.html');\n\n    } catch (error) {\n        console.log(\"Error occured at signup controller\", error);\n        res.status(500).send(\"Internal Server Error\");\n    }\n}\n\n\nconst dashboard = (req, res) => {\n    try {\n        res.redirect('/dashboard.html');\n    } catch (error) {\n        console.log(\"Error occured at dashboard controller\", error);\n        res.send(\"Internal server error\");\n    }\n}\n\nmodule.exports = { login, signUp, dashboard };"});
});
  app.get('/npm', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"npm i mongoose cookie-parser cors ejs express express-session mongoose multer nodemon"});
});

  app.get('/server', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const express = require('express');\nconst path = require('path');\nconst session = require('express-session');\nconst cors = require('cors');\nconst cookieParser = require('cookie-parser');\nconst { dbConnect } = require('./config/database');\nconst router = require('./routes/router');\nconst adminRouter = require('./routes/adminRouter');\nconst UserRouter = require('./routes/userRouter');\n\nconst app = express();\n\napp.set('view engine', \"ejs\");\napp.set('views', path.join(__dirname, './public/views'));\napp.use(express.static(path.join(__dirname, './public')));\n\napp.use(cookieParser());\n\napp.use(cors());\n\napp.use(session({\n    saveUninitialized: true,\n    resave: false,\n    secret: \"SECRET\",\n}))\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\n// routes\napp.use('/user', UserRouter);\napp.use('/', router);\napp.use('/admin', adminRouter);\n\n\n\napp.listen(3000, () => {\n    console.log(\"server started\");\n})\ndbConnect();"});
 });

  app.get('/multerconfig', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const multer = require('multer');\nconst path = require('path');\n\nconst storage = multer.diskStorage({\n    destination: function (req, file, cb) {\n      cb(null, path.join(__dirname, '../public/uploads'));\n    },\n    filename: function (req, file, cb) {\n      cb(null, Date.now() + '-' + file.originalname)\n    }\n})\n  \nconst upload = multer({ \n    storage: storage,\n    fileFilter: function (req, file, cb) {\n      const filetypes = ['image/jpeg', 'image/png', 'image/jpg'];\n      const extname = ['.jpeg', '.jpg', '.png'].includes(path.extname(file.originalname).toLowerCase());\n      const mimetype = filetypes.includes(file.mimetype);\n    \n      if (mimetype && extname) {\n        cb(null, true);\n      } else {\n        cb('Error: Images Only!');\n      }\n    },\n    limits: { fileSize: 1024 * 1024 * 5 }\n})\n\nmodule.exports =  upload ;"});
 });

  app.get('/dataconfig', (req, res) => {
  // Pass data to index.ejs
  res.render('index', { text:"const mongoose = require('mongoose');\n\nconst dbConnect = () => {\n    mongoose.connect('mongodb://localhost:27017/', {\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n    })\n    .then(() => {\n        console.log(\"connected to database\");\n    })\n    .catch((err) => {\n        console.log(err);\n    })\n}\n\nmodule.exports = { dbConnect };"});
});
  //    app.get('/8', (req, res) => {
  // // Pass data to index.ejs
  // res.render('index', { text:""});
//});

  // app.get('/8', (req, res) => {
  // // Pass data to index.ejs
  // res.render('index', { text:""});
//});
    
// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});
